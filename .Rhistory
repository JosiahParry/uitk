usethis::use_build_ignore("course-site")
library(uitk)
uitk::airbnb_locations
uitk::suffolk_county
class(uitk::suffolk_county)
plot(uitk::suffolk_county)
library(sf)
plot(uitk::suffolk_county)
uitk::airbnb_hosts
library(tidyverse)
1 + 1
gc()
1
### Midterms and Finals
file.path("course-site", to_render)
to_render <- list.files("course-site", pattern = ".Rmd")
to_render
file.path("course-site", to_render) %>%
map(.f = ~rmarkdown::render_site(.x, output_dir = "_site"))
file.path("course-site", to_render) magrittr::`%>%`
file.path("course-site", to_render) magrittr::%>%
map(.f = ~rmarkdown::render_site(.x, output_dir = "_site"))
file.path("course-site", to_render) magrittr::%>%
purrr::map(.f = ~rmarkdown::render_site(.x, output_dir = "_site"))
file.path("course-site", to_render) magrittr::%>%
purrr::map(.f = ~rmarkdown::render_site(.x, output_dir = "_site"))
purrr::map(file.path("course-site", to_render),
f = ~rmarkdown::render_site(.x, output_dir = "_site"))
purrr::map(file.path("course-site", to_render),
.f = ~rmarkdown::render_site(.x, output_dir = "_site"))
purrr::map(file.path("course-site", to_render),
.f = ~rmarkdown::render_site(.x, output_dir = "_site"))
?rmarkdown::render_site
purrr::map(file.path("course-site", to_render),
.f = ~rmarkdown::render_site(.x))
render_distill <- function(dir = "course-site") {
to_render <- list.files(dir, pattern = ".Rmd")
purrr::map(file.path(dir, to_render),
.f = ~rmarkdown::render_site(.x))
}
render_distill <- function(dir = "course-site") {
to_render <- list.files(dir, pattern = ".Rmd")
purrr::map(file.path(dir, to_render),
.f = ~rmarkdown::render_site(.x))
}
render_distill()
library(uitk)
library(uitk)
library(uitk)
library(uitk)
library(learnr)
library(uitk)
library(tidyverse)
knitr::opts_chunk$set(echo = FALSE, exercise=TRUE, warning=FALSE)
uitk::acs_edu
render_distill <- function(dir = "course-site") {
to_render <- list.files(dir, pattern = ".Rmd")
purrr::map(file.path(dir, to_render),
.f = ~rmarkdown::render_site(.x))
}
render_distill()
library(learnr)
library(tidyverse)
knitr::opts_chunk$set(echo = FALSE, exercise=TRUE, warning=FALSE)
library(uitk)
airbnb_locations
head(airbnb_locations)
acs_tracts <- uitk::suffolk_county
acs_tracts
cat(read_lines("../data/suffolk_acs.geojson", n_max = 4), sep = "\n")
library(learnr)
library(uitk)
library(tidyverse)
knitr::opts_chunk$set(echo = FALSE, exercise=TRUE, warning=FALSE)
loc_sf <- sf::st_as_sf(airbnb_locations,
coords = c("longitude", "latitude"),
crs = 4326)
count(loc_sf) %>%
plot()
install.packages("keras")
keras::install_keras
browseURL("https://google.com")
placekey::boston_bars
clipr::write_clip(placekey::boston_bars)
280000*6
?knitr::include_graphics()
render_distill <- function(dir = "course-site") {
to_render <- list.files(dir, pattern = ".Rmd")
purrr::map(file.path(dir, to_render),
.f = ~rmarkdown::render_site(.x))
}
render_distill()
fa::fa("twitter")
fontawesome::fa("twitter")
devtools::load_all(".")
Please email me if you have any questions :)
render_distill <- function(dir = "course-site") {
to_render <- list.files(dir, pattern = ".Rmd")
purrr::map(file.path(dir, to_render),
.f = ~rmarkdown::render_site(.x))
}
render_distill()
render_distill <- function(dir = "course-site") {
to_render <- list.files(dir, pattern = ".Rmd")
purrr::map(file.path(dir, to_render),
.f = ~rmarkdown::render_site(.x))
}
render_distill()
dsfs
render_distill()
render_distill <- function(dir = "course-site") {
to_render <- list.files(dir, pattern = ".Rmd")
purrr::map(file.path(dir, to_render),
.f = ~rmarkdown::render_site(.x))
}
render_distill()
library(shiny)
account <- "your company"
width <- "50%"
#Level of Experience/Exposure
exposure <- c("Project-based workflow",
"R package development",
"R Markdown",
"Parameterized R Markdown",
"Shiny",
"Pins",
"Plumber APIs",
"Jupyter Notebooks / JupyterLabs",
"Flask APIs / apps",
"Plotly Dash apps",
"Streamlit",
"Bokeh"
)
#learning topics of interest
topics <- c("Intro to R",
"Intro to Tidyverse",
"Machine Learning with tidymodels",
"Parameterized R Markdown",
"R package development",
"Scaling big data analysis (data.table, databases, Spark)",
"Productionizing R with REST APIs and plumber",
"Intermediate R (iteration, function writing, S3 objects)",
"Knowledge Dissemination with R (bookdown, pkgdown, rmarkdown)",
"Best practices in working with databases",
"Shiny best practices - modularizing; performance tuning, etc.",
"Environments Management / Reproducibility",
"Production pipelines")
#RStudio Connect topics of interest
topics_rsc <- c("Sending customized, condition-based emails/reports",
"Automated / self-service reports",
"Developing / deploying APIs",
"Object storage with `pins`",
"Git-backed publishing / version control workflows",
"Developing and running ETL processes on a schedule",
"Deploying Python-based content",
"Model deployment / Model managment")
#RStudio Server Pro topics of interest
topics_rsp <- c("Kubernetes",
"Slurm",
"Project Sharing",
"Developing in Python within RSP",
"Using Git / version control")
#Pain points
topics_pain <- c("Package Management / Reproducibility",
"Scaling data products to support Production",
"Database connections",
"Working with older versions of R",
"Working with internally developed packages",
"Automating repetitive tasks or analyses",
"Getting data to RStudio from another system (or vice versa)",
"Maintaining cumbersome apps")
ui <- navbarPage("R & Python User Survey", #position = "fixed-top",
tabPanel("Getting to know each other",
column(6,h2("Who's asking?"),
hr(),
p("Hi! I'm Katie Masiello. I work on the RStudio Customer Success Team
and my role is to work with R and Python users at ", account,
"to make the most out of your RStudio professional tooling. I am
a technical resource for reviewing best practices, overcoming pain
points, and helping you to expand the value and impact of your data
science projects."),
p("This survey is intended to help me understand
how I can be a better resource to your team so
you can gain the most value from your RStudio
investment. Please use this as an opportunity
to share with me anything you'd like. The
responses to this are entirely anonymous."),
p("Additionally, if there is anything you'd like
to communicate with me via email please feel
free to do so at ", a("katie.masiello@rstudio.com",
href="mailto:katie.masiello@rstudio.com")
)),
column(6,
h2("Please tell me about you"),
hr(),
textInput("company", "Company name:", width = width),
h4("Which of the following best describes your role?"),
radioButtons("role",
"Select:",
c("Executive (CTO, CIO, Director of Data Science, etc.)",
"Data Science Manager (Principal Data Scientists, Practice Lead etc.)",
"Data Scientist",
"Data Analyst/Business Intelligence Analyst",
"Product Manager/Product Owner",
"IT/Dev Ops Admin",
"Other")),
hr(),
h3("Familiarity with R and Python"),
p("1 = Not familiar at all"),
p("2 = Getting my bearings"),
p("3 = I feel confident - If I get stuck, I generally can find answers"),
p("4 = I consider myself an advanced user"),
sliderInput("r_fam","Familiarity with R",
min = 1, max = 4, step = 1,
value = 1, width = width),
sliderInput("py_fam","Familiarity with Python",
min = 1, max = 4, step = 1,
value = 1, width = width)
)
), #end of tabpanel1
tabPanel("Level of Experience/Exposure",
sidebarLayout(
sidebarPanel(style = "position:fixed;width:220px;",
p("Have you heard of the topics below? How well do you know them?"),
p("0 = Never heard of it"),
p("1 = I know of it"),
p("2 = I've played with it"),
p("3 = I've done it before"),
p("4 = I do it frequently")
),
mainPanel(
purrr::map(exposure, ~sliderInput(inputId = .x, .x,min = 0, max = 4, step = 1, value = 0, width = width)),
)
) #end of sidebar layout
), #end of tabpanel2
tabPanel("Potential Topics of Interest",
sidebarLayout(
sidebarPanel(style = "position:fixed;width:220px;",
p("Would resources, webinars, or other knowledge sharing in the following areas be valuable to you?"),
p("0 = Not relevant to me"),
p("1 = This would be elementary for me"),
p("2 = Some interest"),
p("3 = Very interested")
),
mainPanel(
purrr::map(topics, ~radioButtons(inputId = .x, .x,choices = c(0, 1, 2, 3), inline = TRUE)),
)
)
), #end of tabpanel3
tabPanel("RStudio Connect Specific Topics",
sidebarLayout(
sidebarPanel(style = "position:fixed;width:220px;",
p("What features or elements of RStudio Connect would you find useful to learn about?"),
p("0 = No Interest"),
p("1 = I already know this"),
p("2 = Some interest"),
p("3 = Very interested")
),
mainPanel(
purrr::map(topics_rsc, ~radioButtons(inputId = .x, .x,choices = c(0, 1, 2, 3), inline = TRUE)),
)
)
),
tabPanel("RStudio Server Pro Specific Topics Topics",
sidebarLayout(
sidebarPanel(style = "position:fixed;width:220px;",
p("What features or elements of RStudio Server Pro would you find useful to learn about?"),
p("0 = No Interest"),
p("1 = I already know this"),
p("2 = Some interest"),
p("3 = Very interested")
),
mainPanel(
purrr::map(topics_rsp, ~radioButtons(inputId = .x, .x,choices = c(0, 1, 2, 3), inline = TRUE)),
)
)
),
tabPanel("Pain Points",
sidebarLayout(
sidebarPanel(style = "position:fixed;width:220px;",
p("What causes friction in your workflow?"),
p("0 = No Issues"),
p("1 = Occasionally Painful"),
p("2 = Sometimes Painful"),
p("3 = This is Significant Pain for me")
),
mainPanel(
purrr::map(topics_pain, ~radioButtons(inputId = .x, .x,choices = c(0, 1, 2, 3), inline = TRUE)),
)
)
),
tabPanel("Wrap Up",
textInput("topics_addl", "What other topics would you be interested in?", width = width),
textInput("topics_priority", "What 1-3 learning topic(s) and/or pain points are your highest priority?", width = width),
textInput("other_systems", "Are there other platforms / services / tools you interface or integrate with that would be helpful to discuss?", width = width),
textInput("other_comments",
"Is there anything about your team, workflow, skills, etc. that would be helpful to know?
(e.g., your most common use case, what type of work you do, what packages you use most often, ...)",
width = width),
textInput("email", "Optional: your name and email address", width = width),
actionButton("submit", "Submit", class = "btn-primary")
)
) # end of navbarPage
server = function(input, output, session) {
formData <- reactive({
data <- sapply(fieldsAll, function(x) input[[x]])
data <- c(data, timestamp = epochTime())
data <- t(data)
data
})
humanTime <- function() format(Sys.time(), "%Y%m%d-%H%M%OS")
saveData <- function(data) {
fileName <- sprintf("%s_%s.csv",
humanTime(),
digest::digest(data))
write.csv(x = data, file = file.path(responsesDir, fileName),
row.names = FALSE, quote = TRUE)
observe({
shinyjs::toggleState(id = "submit", condition = mandatoryFilled)
})
}
# action to take when submit button is pressed
observeEvent(input$submit, {
saveData(formData())
})
}
fieldsAll <- c("role")
responsesDir <- file.path("responses")
epochTime <- function() {
as.integer(Sys.time())
}
# Run the application
shinyApp(ui = ui, server = server)
?blastula::blastula_email
library(genius)
genius_lyrics("kendrick lamar", "poetic justice")
genius_lyrics("kendrick lamar", "poetic justice", info = "all")
food <- read_csv("/Users/josiah/Downloads/Food.Inspections.Records.csv")
library(tidyverse)
food <- read_csv("/Users/josiah/Downloads/Food.Inspections.Records.csv")
View(food)
acs_raw <- read_csv("data-raw/ACS_1317_TRACT.csv")
library(tidyverse)
library(tidyverse)
acs_raw <- read_csv("data-raw/ACS_1317_TRACT.csv")
acs_edu <- read_csv("data-raw/acs_edu.csv")
ecometrics <- read_csv("data-raw/ecometrics.csv") %>%
mutate(across(where(is.character), tolower))
commute <- read_csv("data-raw/gba_commute.csv")
suffolk_county <- sf::read_sf("data-raw/suffolk_acs.geojson")
airbnb_hosts <- read_csv("data-raw/airbnb/hosts.csv", na = c("N/A"))
airbnb_listings <- read_csv("data-raw/airbnb/listings.csv")
airbnb_locations <- read_csv("data-raw/airbnb/locations.csv")
airbnb_reviews <- read_csv("data-raw/airbnb/reviews.csv")
usethis::use_data(acs_raw, acs_edu, ecometrics, commute, suffolk_county,
airbnb_hosts, airbnb_listings, airbnb_locations, overwrite = TRUE)
library(uitk)
acs_housing <- read_csv("data-raw/acs_housing")
i
library(tidyverse)
acs_housing <- read_csv("data-raw/acs_housing.csv")
acs_housing <- read_csv("data-raw/acs_housing.csv")
acs_housing <- read_csv("data-raw/acs-housing.csv")
acs_housing
View(acs_housing)
library(tidyverse)
acs_raw <- read_csv("data-raw/ACS_1317_TRACT.csv")
acs_edu <- read_csv("data-raw/acs_edu.csv")
acs_housing <- read_csv("data-raw/acs-housing.csv")
ecometrics <- read_csv("data-raw/ecometrics.csv") %>%
mutate(across(where(is.character), tolower))
commute <- read_csv("data-raw/gba_commute.csv")
suffolk_county <- sf::read_sf("data-raw/suffolk_acs.geojson")
airbnb_hosts <- read_csv("data-raw/airbnb/hosts.csv", na = c("N/A"))
airbnb_listings <- read_csv("data-raw/airbnb/listings.csv")
airbnb_locations <- read_csv("data-raw/airbnb/locations.csv")
airbnb_reviews <- read_csv("data-raw/airbnb/reviews.csv")
usethis::use_data(acs_raw, acs_housing, acs_edu, ecometrics, commute, suffolk_county,
airbnb_hosts, airbnb_listings, airbnb_locations, overwrite = TRUE)
library(uitk)
pagedown::chrome_print("course-site/_site/syllabus.html")
20 + 10 + 15 + 15 + 15 + 25
library(blastula)
smtp_creds <- create_smtp_creds_key(
id = "j.parry@northeastern.edu",
user = "j.parry@northeastern.edu",
provider = "office365",
host = "smtp.office365.com",
port = 587,
use_ssl = TRUE
)
?create_smtp_creds_file
test_message <- prepare_test_message()
creds_key(id = "j.parry@northeastern.edu")
test_message <- prepare_test_message()
test_message
test_message %>%
smtp_send(
from = "j.parry@northeastern.edu",
to = "j.parry@northeastern.edu",
subject = "Testing the `smtp_send()` function",
credentials = creds_key(id = "j.parry@northeastern.edu")
)
smtp_creds <- create_smtp_creds_key(
id = "j.parry@northeastern.edu",
user = "j.parry@northeastern.edu",
provider = "office365",
host = "smtp.office365.com",
port = 587,
use_ssl = F
)
smtp_creds <- create_smtp_creds_key(
id = "j.parry@northeastern.edu",
user = "j.parry@northeastern.edu",
provider = "office365",
host = "smtp.office365.com",
port = 587,
use_ssl = F,
overwrite = TRUE
)
test_message %>%
smtp_send(
from = "j.parry@northeastern.edu",
to = "j.parry@northeastern.edu",
subject = "Testing the `smtp_send()` function",
credentials = creds_key(id = "j.parry@northeastern.edu")
)
smtp_creds <- create_smtp_creds_key(
id = "j.parry@northeastern.edu",
user = "j.parry@northeastern.edu",
provider = "office365",
host = "smtp.office365.com",
port = 587,
use_ssl = T,
overwrite = TRUE
)
test_message %>%
smtp_send(
from = "j.parry@northeastern.edu",
to = "j.parry@northeastern.edu",
subject = "Testing the `smtp_send()` function",
credentials = creds_key(id = "j.parry@northeastern.edu")
)
smtp_creds <- create_smtp_creds_key(
id = "j.parry@northeastern.edu",
user = "j.parry@northeastern.edu",
provider = "office365",
host = "smtp.office365.com",
port = "587",
use_ssl = T,
overwrite = TRUE
)
smtp_creds <- create_smtp_creds_key(
id = "j.parry@northeastern.edu",
user = "j.parry@northeastern.edu",
provider = "office365",
host = "smtp.office365.com",
port = "587",
use_ssl = T,
overwrite = TRUE
)
smtp_creds <- create_smtp_creds_key(
id = "j.parry@northeastern.edu",
user = "j.parry@northeastern.edu",
provider = "office365",
host = "smtp.office365.com",
port = "587",
use_ssl = T,
overwrite = TRUE
)
?create_smtp_creds_file
smtp_creds <- create_smtp_creds_key(
id = "j.parry@northeastern.edu",
user = "j.parry@northeastern.edu",
provider = "office365",
#host = "smtp.office365.com",
port = "587",
use_ssl = T,
overwrite = TRUE
)
test_message <- prepare_test_message()
test_message %>%
smtp_send(
from = "j.parry@northeastern.edu",
to = "j.parry@northeastern.edu",
subject = "Testing the `smtp_send()` function",
credentials = creds_key(id = "j.parry@northeastern.edu")
)
smtp_creds <- create_smtp_creds_key(
id = "j.parry@northeastern.edu",
user = "j.parry@northeastern.edu",
provider = "office365",
#host = "smtp.office365.com",
#port = "587",
#use_ssl = T,
overwrite = TRUE
)
test_message <- prepare_test_message()
test_message %>%
smtp_send(
from = "j.parry@northeastern.edu",
to = "j.parry@northeastern.edu",
subject = "Testing the `smtp_send()` function",
credentials = creds_key(id = "j.parry@northeastern.edu")
)
render_distill <- function(dir = "course-site") {
to_render <- list.files(dir, pattern = ".Rmd")
purrr::map(file.path(dir, to_render),
.f = ~rmarkdown::render_site(.x))
}
render_distill
render_distill()
